services:
  accountsdb:
    container_name: accountsdb-docker-compose
    ports:
      - 3307:3306
    environment:
      MYSQL_DATABASE: accountsdb
    extends:
      file: common-config.yml
      service: microservice-db-config

  cardsdb:
    container_name: cardsdb-docker-compose
    ports:
      - 3309:3306
    environment:
      MYSQL_DATABASE: cardsdb
    extends:
      file: common-config.yml
      service: microservice-db-config

  loansdb:
    container_name: loansdb-docker-compose
    ports:
      - 3308:3306
    environment:
      MYSQL_DATABASE: loansdb
    extends:
      file: common-config.yml
      service: microservice-db-config

  # We have already tested redis in rate limtier pattern so we're removing this
  # to increase the apps performance
  #  redis:
  #    image: redis
  #    ports:
  #      - "6379:6379"
  #    healthcheck:
  #      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
  #      timeout: 10s
  #      retries: 10
  #    extends:
  #      file: common-config.yml
  #      service: network-deploy-service

  # rabbitmq must start properly before other service is started,
  # because all service is depending on rabbitmq
  rabbit-mq:
    image: rabbitmq:management
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      start_period: 5s    # initial delay after container starts before health checks begin.
      retries: 10         # how many consecutive failures docker tolerates before marking the container as unhealthy
      interval: 10s       # docker will run the health check every 10 seconds.
      timeout: 5s         # if the health check takes longer than 5 seconds, it’s treated as a failure.
    extends:
      file: common-config.yml
      service: network-deploy-service
  
  # we must make sure that "configserver" is ready before running
  # accounts, cards and loans microservices.
  configserver:
    image: "felixl07/configserver:mini-bank"
    container_name: configserver-ms
    ports:
      - "8071:8071"
    depends_on:
      rabbit-mq:
        condition: service_healthy
    healthcheck:
      # --fail
      #   Tells curl to fail silently on server errors (like HTTP 500, 404).
      #   It won’t output the HTML error page — it just returns a non-zero exit code.
      # --silent
      #   Suppresses all the progress/output text.
      #   Makes the command quiet — you’ll only see the response body (if any).
      # grep UP
      #   If UP is found, the command succeeds (exit code 0).
      #   If UP is not found, it fails (exit code 1).
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      start_period: 10s   # initial delay after container starts before health checks begin.
      retries: 10         # how many consecutive failures docker tolerates before marking the container as unhealthy
      interval: 10s       # docker will run the health check every 10 seconds.
      timeout: 5s         # if the health check takes longer than 5 seconds, it’s treated as a failure.
    extends:
      file: common-config.yml
      service: microservice-base-config

  eurekaserver:
    image: "felixl07/eurekaserver:mini-bank"
    container_name: eurekaserver-ms
    ports:
      - "8070:8070"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      # --fail
      #   Tells curl to fail silently on server errors (like HTTP 500, 404).
      #   It won’t output the HTML error page — it just returns a non-zero exit code.
      # --silent
      #   Suppresses all the progress/output text.
      #   Makes the command quiet — you’ll only see the response body (if any).
      # grep UP
      #   If UP is found, the command succeeds (exit code 0).
      #   If UP is not found, it fails (exit code 1).
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      start_period: 10s   # initial delay after container starts before health checks begin.
      retries: 10         # how many consecutive failures docker tolerates before marking the container as unhealthy
      interval: 10s       # docker will run the health check every 10 seconds.
      timeout: 5s         # if the health check takes longer than 5 seconds, it’s treated as a failure.
    extends:
      file: common-config.yml
      service: microservice-configserver-config
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"
  
  accounts:
    image: "felixl07/accounts:mini-bank"
    container_name: accounts-ms
    ports:
      - "8080:8080"
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      start_period: 10s   # initial delay after container starts before health checks begin.
      retries: 10         # how many consecutive failures docker tolerates before marking the container as unhealthy
      interval: 10s       # docker will run the health check every 10 seconds.
      timeout: 5s         # if the health check takes longer than 5 seconds, it’s treated as a failure.
    environment:
      SPRING_APPLICATION_NAME: "accounts"
      # we're accessing this url in outside network so we're using the internal docker port
      SPRING_DATASOURCE_URL: "jdbc:mysql://accountsdb:3306/accountsdb"
    # accounts service will start only when configserver's and accountsdb's service condition is health
    depends_on:
      accountsdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-eurekaserver-config


  cards:
    image: "felixl07/cards:mini-bank"
    container_name: cards-ms
    ports:
      - "9000:9000"
    healthcheck:
      test: "curl --fail --silent localhost:9000/actuator/health/readiness | grep UP || exit 1"
      start_period: 10s   # initial delay after container starts before health checks begin.
      retries: 10         # how many consecutive failures docker tolerates before marking the container as unhealthy
      interval: 10s       # docker will run the health check every 10 seconds.
      timeout: 5s         # if the health check takes longer than 5 seconds, it’s treated as a failure.
    environment:
      SPRING_APPLICATION_NAME: "cards"
      # we're accessing this url in outside network so we're using the internal docker port
      SPRING_DATASOURCE_URL: "jdbc:mysql://cardsdb:3306/cardsdb"
    # cards service will start only when configserver's service condition is health
    depends_on:
      cardsdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-eurekaserver-config


  loans:
    image: "felixl07/loans:mini-bank"
    container_name: loans-ms
    ports:
      - "8090:8090"
    healthcheck:
      test: "curl --fail --silent localhost:8090/actuator/health/readiness | grep UP || exit 1"
      start_period: 10s   # initial delay after container starts before health checks begin.
      retries: 10         # how many consecutive failures docker tolerates before marking the container as unhealthy
      interval: 10s       # docker will run the health check every 10 seconds.
      timeout: 5s         # if the health check takes longer than 5 seconds, it’s treated as a failure.
    environment:
      SPRING_APPLICATION_NAME: "loans"
      # we're accessing this url in outside network so we're using the internal docker port
      SPRING_DATASOURCE_URL: "jdbc:mysql://loansdb:3306/loansdb"
    # loans service will start only when configserver's service condition is health
    depends_on:
      loansdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-eurekaserver-config

  gatewayserver:
    image: "felixl07/gatewayserver:mini-bank"
    container_name: gatewayserver-ms
    ports:
      - "8072:8072"
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 1s
    depends_on:
      accounts:
        condition: service_healthy
      cards:
        condition: service_healthy
      loans:
        condition: service_healthy
      redis:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-eurekaserver-config

  # ------------------------ SERVICES RELATED TO GRAFANA ----------------------------------------------
  # ---------------------------------------------------------------------------------------------------
  # ---------------------------------------------------------------------------------------------------
  read:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - "3101:3100"
      - "7946"
      - "9095"
    volumes:
      - ..observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      mini-bank:
        aliases:
          - loki

  write:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - "3102:3100"
      - "7946"
      - "9095"
    volumes:
      - ..observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:latest
    volumes:
      - .observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - "12345:12345"
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - "9000"
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
          - name: Loki
            type: loki
            access: proxy
            url: http://gateway:3100
            jsonData:
              httpHeaderName1: "X-Scope-OrgID"
            secureJsonData:
              httpHeaderValue1: "tenant1"
        EOF
        /run.sh
    ports:
      - "3000:3000"
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  backend:
    image: grafana/loki:latest
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service


  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

networks:
  mini-bank:
    driver: "bridge"
